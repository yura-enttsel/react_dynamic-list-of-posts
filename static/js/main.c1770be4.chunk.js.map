{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","services/comments.ts","types/ErrorType.ts","App.tsx","services/user.ts","services/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","handlePostSelection","Loader","NewCommentForm","postId","onCommentAdd","useState","isSubmitting","setIsSubmitting","name","setName","hasNameError","setHasNameError","email","setEmail","hasEmailError","setHasEmailError","body","setBody","hasBodyError","setHasBodyError","handleSubmit","event","a","preventDefault","trim","newComment","Error","onSubmit","onReset","htmlFor","placeholder","value","onChange","target","PostDetails","comments","isLoading","errorMessage","onCommentDelete","isFormShown","setIsFormShown","useEffect","length","comment","href","commentId","UserSelector","users","selectedUser","setselectedUser","setSelectedUser","isTriggered","setIsTriggered","role","user","index","handleUserSelect","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","ErrorType","postComment","App","setUsers","setPosts","setComments","setErrorMessage","setIsLoading","loadUsers","loadedUser","USERS","loadPosts","loadedPosts","POSTS","loadComments","loadedComments","COMMENTS","currentComments","filter","services","COMM_DEL","addComment","addedComment","currComments","COMM_ADD","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1770be4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPost, setSelectedPost,\n}) => {\n  const handlePostSelection = (post: Post) => {\n    if (!selectedPost) {\n      setSelectedPost(post);\n\n      return;\n    }\n\n    if (selectedPost && selectedPost.id !== post.id) {\n      setSelectedPost(post);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => handlePostSelection(post)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  onCommentAdd: (comment: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onCommentAdd }) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [name, setName] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [hasEmailError, setHasEmailError] = useState(false);\n\n  const [body, setBody] = useState('');\n  const [hasBodyError, setHasBodyError] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setHasNameError(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setHasEmailError(false);\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setHasBodyError(false);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setHasNameError(!name.trim());\n    setHasEmailError(!email.trim());\n    setHasBodyError(!body.trim());\n    if (!!name.trim() && !!email.trim() && !!body.trim()) {\n      setIsSubmitting(true);\n      const newComment = {\n        name,\n        email,\n        body,\n        postId,\n      };\n\n      try {\n        await onCommentAdd(newComment);\n      } catch {\n        throw new Error('Can\\'t add new comment');\n      } finally {\n        setIsSubmitting(false);\n        setBody('');\n      }\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setHasNameError(false);\n    setHasEmailError(false);\n    setHasBodyError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={reset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': hasNameError,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': hasBodyError,\n            })}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {hasBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  comments: Comment[];\n  selectedPost: Post;\n  isLoading: boolean;\n  errorMessage: string;\n  onCommentDelete: (id: number) => void;\n  onCommentAdd: (comment: CommentData) => Promise<void>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectedPost,\n  isLoading,\n  errorMessage,\n  onCommentDelete,\n  onCommentAdd,\n}) => {\n  const [isFormShown, setIsFormShown] = useState(false);\n\n  useEffect(() => setIsFormShown(false), [selectedPost]);\n\n  const handleCommentDelete = (commentId: number) => onCommentDelete(commentId);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {comments.length === 0 && !isLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && !isLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleCommentDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isFormShown && !isLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormShown(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShown && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            onCommentAdd={onCommentAdd}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, setSelectedUser: setselectedUser,\n}) => {\n  const [isTriggered, setIsTriggered] = useState(false);\n\n  const handleClick = () => {\n    setIsTriggered(!isTriggered);\n  };\n\n  const handleUserSelect = (user: User) => {\n    setselectedUser(user);\n    setIsTriggered(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isTriggered,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleClick}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user, index) => (\n            <a\n              key={user.id}\n              href={`#user-${index + 1}`}\n              className={classNames('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getPostComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n\nexport const postComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","export enum ErrorType {\n  USERS = 'Can\\'t load users',\n  POSTS = 'Can\\'t load posts',\n  COMMENTS = 'Can\\'t load comments',\n  COMM_DEL = 'Can\\'t delete comment',\n  COMM_ADD = 'Can\\'t add comment',\n}\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './services/user';\nimport { getUserPosts } from './services/posts';\nimport * as services from './services/comments';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadUsers = async () => {\n    setErrorMessage('');\n    setPosts([]);\n    setSelectedPost(null);\n    setComments([]);\n    setIsLoading(true);\n    try {\n      const loadedUser = await getUsers();\n\n      setUsers(loadedUser);\n    } catch {\n      setErrorMessage(ErrorType.USERS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, [selectedUser]);\n\n  const loadPosts = async (id: number) => {\n    setErrorMessage('');\n    setIsLoading(true);\n    try {\n      const loadedPosts = await getUserPosts(id);\n\n      setPosts(loadedPosts);\n    } catch {\n      setErrorMessage(ErrorType.POSTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      loadPosts(selectedUser?.id);\n    }\n  }, [selectedUser]);\n\n  const loadComments = async (id: number) => {\n    setErrorMessage('');\n    setIsLoading(true);\n    try {\n      const loadedComments = await services.getPostComments(id);\n\n      setComments(loadedComments);\n    } catch {\n      setErrorMessage(ErrorType.COMMENTS);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      loadComments(selectedPost?.id);\n    }\n  }, [selectedPost]);\n\n  const deleteComment = async (commentId: number) => {\n    setErrorMessage('');\n    setComments(currentComments => currentComments\n      .filter(({ id }) => id !== commentId));\n    try {\n      await services.deleteComment(commentId);\n    } catch (error) {\n      setComments(comments);\n      setErrorMessage(ErrorType.COMM_DEL);\n      throw error;\n    }\n  };\n\n  const addComment = async (comment: CommentData) => {\n    setErrorMessage('');\n    try {\n      const addedComment = await services.postComment(comment);\n\n      setComments(currComments => [...currComments, addedComment]);\n    } catch {\n      setErrorMessage(ErrorType.COMM_ADD);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && !isLoading && !errorMessage && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && posts.length === 0 && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {selectedUser && !posts.length\n                && !isLoading && !errorMessage && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  comments={comments}\n                  isLoading={isLoading}\n                  errorMessage={errorMessage}\n                  selectedPost={selectedPost}\n                  onCommentDelete={deleteComment}\n                  onCommentAdd={addComment}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getUserPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}